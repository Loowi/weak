/*
  Weak, a chess perft calculator derived from Stockfish.

  Copyright (C) 2004-2008 Tord Romstad (Glaurung author)
  Copyright (C) 2008-2012 Marco Costalba, Joona Kiiski, Tord Romstad (Stockfish authors)
  Copyright (C) 2011-2012 Lorenzo Stoakes

  Weak is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Weak is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef MAGIC_HEADER
#define MAGIC_HEADER

#define MAGIC_BISHOP 0
#define MAGIC_ROOK 1

#include "weak.h"

BitBoard *BishopThreatBase[64];
BitBoard *RookThreatBase[64];

static const BitBoard magicBoard[2][64] = {
  // Bishop.
  {
    C64(0x0120200410408020),
    C64(0x00600a3092028000),
    C64(0x0010240840434040),
    C64(0x0304404080008028),
    C64(0x0202021000000000),
    C64(0x0801100210002810),
    C64(0x0002008404400521),
    C64(0x0a01010050040401),
    C64(0x0201200401184501),
    C64(0x0014101218050420),
    C64(0x0240082244082102),
    C64(0x00006c0522020000),
    C64(0x04000510c0000200),
    C64(0x2000008220a02000),
    C64(0x4054040201500828),
    C64(0x010025025b100800),
    C64(0x0010600604100424),
    C64(0x0030820210292100),
    C64(0x1002040124010200),
    C64(0x1008000420401124),
    C64(0x0201000820081404),
    C64(0x0008200c10080840),
    C64(0x0001000044300400),
    C64(0x0000420021082810),
    C64(0x0820054108880800),
    C64(0x0018048228010800),
    C64(0x0020410050110201),
    C64(0x0004004014050042),
    C64(0x4405010020704000),
    C64(0x1104004008080204),
    C64(0x4001064042080480),
    C64(0x0800828000240440),
    C64(0x1001088800a2200c),
    C64(0x0004908440a80804),
    C64(0x0004040200010202),
    C64(0x4414208020080200),
    C64(0x0024080200002009),
    C64(0x0417021200248800),
    C64(0x205049124a010404),
    C64(0x4001004090810408),
    C64(0x010202104024048a),
    C64(0x0552011008000201),
    C64(0x01014040208c1002),
    C64(0x28f2824010400204),
    C64(0x0000180104000844),
    C64(0x000410c081004200),
    C64(0x0008481084008080),
    C64(0x084111020490ce01),
    C64(0x2802020202420041),
    C64(0x100101084124100c),
    C64(0x010202308c100000),
    C64(0x0042022062880990),
    C64(0x1000001082020002),
    C64(0x1020500208084200),
    C64(0x1040280809004300),
    C64(0x10021a04210a0000),
    C64(0x0021010050220804),
    C64(0x0000110088040280),
    C64(0x0020008218c21800),
    C64(0x0000040002104421),
    C64(0x500b004410820200),
    C64(0x0018090820049420),
    C64(0x0080055084080480),
    C64(0x0090420084008600)
  },
// Rook.
  {
    C64(0x6480124000248000),
    C64(0x0040100040002000),
    C64(0x008020008010000a),
    C64(0x1080100280080004),
    C64(0x2080040002800800),
    C64(0x0500140012080100),
    C64(0x068020800a000100),
    C64(0x0200008400402201),
    C64(0x4031002100408004),
    C64(0x0000400050002001),
    C64(0x2003004311002000),
    C64(0x0001001001000821),
    C64(0x0029001100048801),
    C64(0x4408010410884020),
    C64(0x4801000200010004),
    C64(0x1002000a00810064),
    C64(0x0000208000804000),
    C64(0x2810104020004000),
    C64(0x4000c1001502a000),
    C64(0x0002020008402014),
    C64(0x0600808008000400),
    C64(0x0002080120100440),
    C64(0x00248400102208c1),
    C64(0x0204220000509104),
    C64(0x4040002080008048),
    C64(0x4000200040100040),
    C64(0x1024200100401300),
    C64(0x0810100080080080),
    C64(0x0200040080080080),
    C64(0x1560020080040080),
    C64(0x0024108400520908),
    C64(0x0000011200005094),
    C64(0x4380204000800084),
    C64(0x4090006010c00041),
    C64(0x0b00809001802000),
    C64(0x0118100501002008),
    C64(0x0400100801000500),
    C64(0x0841000803000400),
    C64(0x0000101854000201),
    C64(0x0804c04102000084),
    C64(0x0000308040008004),
    C64(0x2000820021020044),
    C64(0x0042044280120020),
    C64(0x2280201001010008),
    C64(0x0000110008010004),
    C64(0x000a000408020010),
    C64(0x154a108108040022),
    C64(0x0800008c00460001),
    C64(0x0180083080400080),
    C64(0x1010004000200040),
    C64(0x41a0802000100080),
    C64(0x0561000810002100),
    C64(0x08c0080081140180),
    C64(0x0000020080040080),
    C64(0x0000901241481400),
    C64(0x00000880410c0200),
    C64(0x0001001a20428001),
    C64(0x0001008240002013),
    C64(0x0800110008402001),
    C64(0x001000308d006019),
    C64(0x0082010410082002),
    C64(0x4202000104081082),
    C64(0x1801001410820041),
    C64(0x0c0410840300c02a)
  }};

static const BitBoard magicMask[2][64] = {
  // Bishop.
  {
    C64(0x0040201008040200),
    C64(0x0000402010080400),
    C64(0x0000004020100a00),
    C64(0x0000000040221400),
    C64(0x0000000002442800),
    C64(0x0000000204085000),
    C64(0x0000020408102000),
    C64(0x0002040810204000),
    C64(0x0020100804020000),
    C64(0x0040201008040000),
    C64(0x00004020100a0000),
    C64(0x0000004022140000),
    C64(0x0000000244280000),
    C64(0x0000020408500000),
    C64(0x0002040810200000),
    C64(0x0004081020400000),
    C64(0x0010080402000200),
    C64(0x0020100804000400),
    C64(0x004020100a000a00),
    C64(0x0000402214001400),
    C64(0x0000024428002800),
    C64(0x0002040850005000),
    C64(0x0004081020002000),
    C64(0x0008102040004000),
    C64(0x0008040200020400),
    C64(0x0010080400040800),
    C64(0x0020100a000a1000),
    C64(0x0040221400142200),
    C64(0x0002442800284400),
    C64(0x0004085000500800),
    C64(0x0008102000201000),
    C64(0x0010204000402000),
    C64(0x0004020002040800),
    C64(0x0008040004081000),
    C64(0x00100a000a102000),
    C64(0x0022140014224000),
    C64(0x0044280028440200),
    C64(0x0008500050080400),
    C64(0x0010200020100800),
    C64(0x0020400040201000),
    C64(0x0002000204081000),
    C64(0x0004000408102000),
    C64(0x000a000a10204000),
    C64(0x0014001422400000),
    C64(0x0028002844020000),
    C64(0x0050005008040200),
    C64(0x0020002010080400),
    C64(0x0040004020100800),
    C64(0x0000020408102000),
    C64(0x0000040810204000),
    C64(0x00000a1020400000),
    C64(0x0000142240000000),
    C64(0x0000284402000000),
    C64(0x0000500804020000),
    C64(0x0000201008040200),
    C64(0x0000402010080400),
    C64(0x0002040810204000),
    C64(0x0004081020400000),
    C64(0x000a102040000000),
    C64(0x0014224000000000),
    C64(0x0028440200000000),
    C64(0x0050080402000000),
    C64(0x0020100804020000),
    C64(0x0040201008040200)
  },
// Rook.
  {
    C64(0x000101010101017e),
    C64(0x000202020202027c),
    C64(0x000404040404047a),
    C64(0x0008080808080876),
    C64(0x001010101010106e),
    C64(0x002020202020205e),
    C64(0x004040404040403e),
    C64(0x008080808080807e),
    C64(0x0001010101017e00),
    C64(0x0002020202027c00),
    C64(0x0004040404047a00),
    C64(0x0008080808087600),
    C64(0x0010101010106e00),
    C64(0x0020202020205e00),
    C64(0x0040404040403e00),
    C64(0x0080808080807e00),
    C64(0x00010101017e0100),
    C64(0x00020202027c0200),
    C64(0x00040404047a0400),
    C64(0x0008080808760800),
    C64(0x00101010106e1000),
    C64(0x00202020205e2000),
    C64(0x00404040403e4000),
    C64(0x00808080807e8000),
    C64(0x000101017e010100),
    C64(0x000202027c020200),
    C64(0x000404047a040400),
    C64(0x0008080876080800),
    C64(0x001010106e101000),
    C64(0x002020205e202000),
    C64(0x004040403e404000),
    C64(0x008080807e808000),
    C64(0x0001017e01010100),
    C64(0x0002027c02020200),
    C64(0x0004047a04040400),
    C64(0x0008087608080800),
    C64(0x0010106e10101000),
    C64(0x0020205e20202000),
    C64(0x0040403e40404000),
    C64(0x0080807e80808000),
    C64(0x00017e0101010100),
    C64(0x00027c0202020200),
    C64(0x00047a0404040400),
    C64(0x0008760808080800),
    C64(0x00106e1010101000),
    C64(0x00205e2020202000),
    C64(0x00403e4040404000),
    C64(0x00807e8080808000),
    C64(0x007e010101010100),
    C64(0x007c020202020200),
    C64(0x007a040404040400),
    C64(0x0076080808080800),
    C64(0x006e101010101000),
    C64(0x005e202020202000),
    C64(0x003e404040404000),
    C64(0x007e808080808000),
    C64(0x7e01010101010100),
    C64(0x7c02020202020200),
    C64(0x7a04040404040400),
    C64(0x7608080808080800),
    C64(0x6e10101010101000),
    C64(0x5e20202020202000),
    C64(0x3e40404040404000),
    C64(0x7e80808080808000)
  }};

static const BitBoard magicShift[2][64] = {
  // Bishop.
  {
    C64(58),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(58),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(57),
    C64(57),
    C64(57),
    C64(57),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(57),
    C64(55),
    C64(55),
    C64(57),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(57),
    C64(55),
    C64(55),
    C64(57),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(57),
    C64(57),
    C64(57),
    C64(57),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(58),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(59),
    C64(58)
  },
// Rook.
  {
    C64(52),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(52),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(53),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(54),
    C64(53),
    C64(52),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(53),
    C64(52)
  }};

static FORCE_INLINE BitBoard
RookAttacksFrom(Position rook, BitBoard occupancy)
{
  BitBoard magic = magicBoard[MAGIC_ROOK][rook];
  BitBoard mask = magicMask[MAGIC_ROOK][rook];
  int shift = magicShift[MAGIC_ROOK][rook];
  BitBoard index = (magic*(occupancy&mask))>>shift;

  return RookThreatBase[rook][index];
}

#endif
