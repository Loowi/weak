#ifndef MAGIC_HEADER
#define MAGIC_HEADER

#define MAGIC_BISHOP 0
#define MAGIC_ROOK 1

#include "weak.h"

BitBoard *BishopThreatBase[64];
BitBoard *RookThreatBase[64];

// See http://chessprogramming.wikispaces.com/First+Rank+Attacks
BitBoard FirstRankAttacks[64*8];

static const BitBoard magicBoard[2][64] = {
  // Bishop.
  {
    C64(0x2180008451400022),
    C64(0x440004010006000),
    C64(0x80200080100128),
    C64(0x4801000804c0800),
    C64(0x100040611002800),
    C64(0xa001504900e0008),
    C64(0x100040200008100),
    C64(0x300002489000042),
    C64(0x1205002101800840),
    C64(0x4400020100044),
    C64(0x5001048200500),
    C64(0x446002030c20009),
    C64(0x12000450602a00),
    C64(0x1003000b00140038),
    C64(0x1000300020004),
    C64(0x1001082024100),
    C64(0x111010020448000),
    C64(0x813808020004004),
    C64(0x90008010802000),
    C64(0x48a2020008405022),
    C64(0x611010030080014),
    C64(0x2001010014002208),
    C64(0x401040008020110),
    C64(0x1006000110468c),
    C64(0x140049080004021),
    C64(0x40200040085004),
    C64(0x4080900080200084),
    C64(0x101002100481000),
    C64(0x2002200101884),
    C64(0x400800a0080),
    C64(0x88200020088015c),
    C64(0x5001138600010464),
    C64(0xc00080800028),
    C64(0x4050002004400043),
    C64(0x420012002180),
    C64(0x10008018080100),
    C64(0x149040280800800),
    C64(0x202000400800280),
    C64(0x12501080c000a10),
    C64(0x1804025402000693),
    C64(0x1110401280218000),
    C64(0x400402010004000),
    C64(0x4110002000848010),
    C64(0x400d980010008080),
    C64(0x1001108010004),
    C64(0x4012360004008080),
    C64(0x8088a10040005),
    C64(0x1180450050860004),
    C64(0x500800041022900),
    C64(0x1004060820200),
    C64(0x4040c20080302200),
    C64(0x204501100020ad00),
    C64(0x800080014008080),
    C64(0x40040002008080),
    C64(0x2652004c08090a00),
    C64(0x800008841042a00),
    C64(0x4001008422041242),
    C64(0x414410032220282),
    C64(0x80842a001009891),
    C64(0x208040900201001),
    C64(0x3001000234900801),
    C64(0x21000228140001),
    C64(0x2900200880104),
    C64(0x22042700408402)
  },
  // Rook.
  {
    C64(0x280112140008000),
    C64(0x40003000402000),
    C64(0x180081000852001),
    C64(0x23001000a1004428),
    C64(0x20800800060c0080),
    C64(0x4200040510080200),
    C64(0x400080082700401),
    C64(0x4080004930800100),
    C64(0xc1002108800040),
    C64(0x45401000200040),
    C64(0x101001043006000),
    C64(0x41000b10010020),
    C64(0x1000801021004),
    C64(0x3087000b00040018),
    C64(0x2000200280409),
    C64(0x109000040820100),
    C64(0x1280004000402000),
    C64(0x30094000512000),
    C64(0x40a44900200100d0),
    C64(0x3402020018104420),
    C64(0x120080806c001800),
    C64(0x4102008004000280),
    C64(0x4008040005500816),
    C64(0x81020004a44904),
    C64(0x1008400080008220),
    C64(0x4000200240015005),
    C64(0x4100411200220080),
    C64(0x19e20200120840),
    C64(0x42040280080080),
    C64(0x422002200100409),
    C64(0x200410400900608),
    C64(0x160208200005401),
    C64(0x20a0204001800080),
    C64(0x420c81c011802000),
    C64(0x110041002000),
    C64(0x400900421000900),
    C64(0x1004808400800800),
    C64(0x4004100400200),
    C64(0x1001800100802600),
    C64(0x4010030082000044),
    C64(0x5808208040008002),
    C64(0x20500460004000),
    C64(0x801600041010011),
    C64(0x1809001000a10008),
    C64(0x3020020a40a0010),
    C64(0x2904004080120),
    C64(0x19038040022),
    C64(0x430104a94020001),
    C64(0x80400680083080),
    C64(0xa10200408200),
    C64(0x142000410100),
    C64(0x841012010010900),
    C64(0x2810401080080),
    C64(0x80500080a040100),
    C64(0x11822850274400),
    C64(0x200200a401004a00),
    C64(0x4000408001002011),
    C64(0x280400120528101),
    C64(0x1002004400811),
    C64(0x40100121001409),
    C64(0x402004420103906),
    C64(0x482001411900832),
    C64(0x800051006488814),
    C64(0x402041008402)
  }};

static const BitBoard magicMask[2][64] = {
  // Bishop.
  {
    C64(0x40201008040200),
    C64(0x402010080400),
    C64(0x4020100a00),
    C64(0x40221400),
    C64(0x2442800),
    C64(0x204085000),
    C64(0x20408102000),
    C64(0x2040810204000),
    C64(0x20100804020000),
    C64(0x40201008040000),
    C64(0x4020100a0000),
    C64(0x4022140000),
    C64(0x244280000),
    C64(0x20408500000),
    C64(0x2040810200000),
    C64(0x4081020400000),
    C64(0x10080402000200),
    C64(0x20100804000400),
    C64(0x4020100a000a00),
    C64(0x402214001400),
    C64(0x24428002800),
    C64(0x2040850005000),
    C64(0x4081020002000),
    C64(0x8102040004000),
    C64(0x8040200020400),
    C64(0x10080400040800),
    C64(0x20100a000a1000),
    C64(0x40221400142200),
    C64(0x2442800284400),
    C64(0x4085000500800),
    C64(0x8102000201000),
    C64(0x10204000402000),
    C64(0x4020002040800),
    C64(0x8040004081000),
    C64(0x100a000a102000),
    C64(0x22140014224000),
    C64(0x44280028440200),
    C64(0x8500050080400),
    C64(0x10200020100800),
    C64(0x20400040201000),
    C64(0x2000204081000),
    C64(0x4000408102000),
    C64(0xa000a10204000),
    C64(0x14001422400000),
    C64(0x28002844020000),
    C64(0x50005008040200),
    C64(0x20002010080400),
    C64(0x40004020100800),
    C64(0x20408102000),
    C64(0x40810204000),
    C64(0xa1020400000),
    C64(0x142240000000),
    C64(0x284402000000),
    C64(0x500804020000),
    C64(0x201008040200),
    C64(0x402010080400),
    C64(0x2040810204000),
    C64(0x4081020400000),
    C64(0xa102040000000),
    C64(0x14224000000000),
    C64(0x28440200000000),
    C64(0x50080402000000),
    C64(0x20100804020000),
    C64(0x40201008040200)
  },
  // Rook.
  {
    C64(0x101010101017e),
    C64(0x202020202027c),
    C64(0x404040404047a),
    C64(0x8080808080876),
    C64(0x1010101010106e),
    C64(0x2020202020205e),
    C64(0x4040404040403e),
    C64(0x8080808080807e),
    C64(0x1010101017e00),
    C64(0x2020202027c00),
    C64(0x4040404047a00),
    C64(0x8080808087600),
    C64(0x10101010106e00),
    C64(0x20202020205e00),
    C64(0x40404040403e00),
    C64(0x80808080807e00),
    C64(0x10101017e0100),
    C64(0x20202027c0200),
    C64(0x40404047a0400),
    C64(0x8080808760800),
    C64(0x101010106e1000),
    C64(0x202020205e2000),
    C64(0x404040403e4000),
    C64(0x808080807e8000),
    C64(0x101017e010100),
    C64(0x202027c020200),
    C64(0x404047a040400),
    C64(0x8080876080800),
    C64(0x1010106e101000),
    C64(0x2020205e202000),
    C64(0x4040403e404000),
    C64(0x8080807e808000),
    C64(0x1017e01010100),
    C64(0x2027c02020200),
    C64(0x4047a04040400),
    C64(0x8087608080800),
    C64(0x10106e10101000),
    C64(0x20205e20202000),
    C64(0x40403e40404000),
    C64(0x80807e80808000),
    C64(0x17e0101010100),
    C64(0x27c0202020200),
    C64(0x47a0404040400),
    C64(0x8760808080800),
    C64(0x106e1010101000),
    C64(0x205e2020202000),
    C64(0x403e4040404000),
    C64(0x807e8080808000),
    C64(0x7e010101010100),
    C64(0x7c020202020200),
    C64(0x7a040404040400),
    C64(0x76080808080800),
    C64(0x6e101010101000),
    C64(0x5e202020202000),
    C64(0x3e404040404000),
    C64(0x7e808080808000),
    C64(0x7e01010101010100),
    C64(0x7c02020202020200),
    C64(0x7a04040404040400),
    C64(0x7608080808080800),
    C64(0x6e10101010101000),
    C64(0x5e20202020202000),
    C64(0x3e40404040404000),
    C64(0x7e80808080808000)
  }};

static const int magicShift[2][64] = {
  // Bishop.
  {
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    57,
    57,
    57,
    57,
    59,
    59,
    59,
    59,
    57,
    55,
    55,
    57,
    59,
    59,
    59,
    59,
    57,
    55,
    55,
    57,
    59,
    59,
    59,
    59,
    57,
    57,
    57,
    57,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    58
  },
  // Rook.
  {
    52,
    53,
    53,
    53,
    53,
    53,
    53,
    52,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    52,
    53,
    53,
    53,
    53,
    53,
    53,
    52
  }};

#endif
